"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _style = _interopRequireDefault(require("./style"));

var _reactNativePaper = require("react-native-paper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const RnIncrementDecrementBtn = ({
  val,
  minVal,
  max,
  disableControl,
  minreq,
  handleClick,
  styleTextInput,
  styleBtn,
  disabledColor,
  activeColor,
  labelStyle
}) => {
  // console.log(typeof labelFontSize);
  const [value, changeValue] = _react.default.useState(0);

  const [count, changeCount] = _react.default.useState(100);

  const [minReq, addMinReq] = _react.default.useState(0);

  const [min, addMinValue] = _react.default.useState(0);

  const [leftBtnDisable, changeLeftBtnDisable] = _react.default.useState(false);

  const [rightBtnDisable, changeRightBtnDisable] = _react.default.useState(false);

  const [disableColorBtn, addDisableColor] = _react.default.useState('#eeeeee');

  const [activeColorBtn, addActiveColor] = _react.default.useState('#509e4b');

  _react.default.useEffect(() => {
    if (val) {
      changeValue(val);
    }

    if (max) {
      changeLeftBtnDisable(max <= 0);
      changeCount(max - 0);
    }

    if (minreq) {
      addMinReq(minreq);
    }

    if (val && max) {
      changeCount(max - val);
      changeRightBtnDisable(val <= 0);
    }

    if (minVal) {
      changeRightBtnDisable(value <= minVal);
      addMinValue(minVal);
    }

    if (disabledColor) {
      addDisableColor(disabledColor);
    }

    if (activeColor) {
      addActiveColor(activeColor);
    }
  }, [val, max, minreq, minVal, disabledColor, activeColor]); // function to handle btn click


  const handlePress = val => {
    handleClick ? handleClick(val) : {};
  };

  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: _style.default.viewOuter
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [_style.default.viewBtnLeft, {
      backgroundColor: leftBtnDisable || disableControl ? disableColorBtn : activeColorBtn
    }, styleBtn]
  }, /*#__PURE__*/_react.default.createElement(_reactNativePaper.Button, {
    labelStyle: labelStyle ? labelStyle : _style.default.labelStyle,
    disabled: leftBtnDisable || disableControl,
    color: '#ffffff',
    onPress: () => {
      if (count - 1 <= 0) {
        changeCount(0);
        changeRightBtnDisable(false);
        changeLeftBtnDisable(true);
        changeValue(value + 1);
      } else {
        if (value < minReq) {
          changeCount(count - minReq);
          changeValue(value + minReq);
          handlePress(value + minReq);
        } else {
          changeCount(count - 1);
          changeValue(value + 1);
          handlePress(value + 1);
        }

        changeRightBtnDisable(false);
      }
    }
  }, "+")), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [_style.default.viewTextInput, styleTextInput]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [{
      color: '#000000'
    }, labelStyle ? labelStyle : _style.default.labelStyle]
  }, value)), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [_style.default.viewBtnRight, {
      backgroundColor: rightBtnDisable || disableControl ? disableColorBtn : activeColorBtn
    }, styleBtn]
  }, /*#__PURE__*/_react.default.createElement(_reactNativePaper.Button, {
    labelStyle: labelStyle ? labelStyle : _style.default.labelStyle,
    disabled: rightBtnDisable || disableControl,
    color: '#ffffff',
    onPress: () => {
      // changeDisable(true);
      if (value - 1 <= min || value - 1 < minReq) {
        changeLeftBtnDisable(false);
        changeRightBtnDisable(true);

        if (value - 1 <= min) {
          changeValue(value - 1);
          changeCount(count + 1);
          handlePress(value - 1);
        }

        if (value - 1 < minReq) {
          changeCount(count + minReq);
          changeValue(0);
          handlePress(0);
        }
      } else {
        changeLeftBtnDisable(false);
        changeCount(count + 1);
        changeValue(value - 1);
        handlePress(value - 1);
      }
    }
  }, "-")));
};

var _default = RnIncrementDecrementBtn;
exports.default = _default;
//# sourceMappingURL=rnIncrementDecrementBtn.js.map